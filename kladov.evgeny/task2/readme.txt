Написать стэковый калькулятор, который принимает в качестве аргумента командой строки имя
файла содержащего команды. Если нет аргумента то использовать стандартный ввод для чтения
команд. Использовать вещественные числа.
Реализовать следующий набор команд:
• # - строка комментарий
• POP, PUSH — работа со стэком
• Арифметические операции + , - , * , /, sqrt. Используют один или два верхних элемента
стека, изымают их из стека, помещая результат назад
• PRINT — печать верхнего элемента стека (без удаления из стека)
• DEFINE — задать значение параметра. В дальнейшем везде использовать вместо
параметра это значение. Например:
DEFINE a 4
PUSH a
SQRT
PRINT
Должно вывести 2
Написать Unit test который будет исполнять тестовую программу для решения квадратного
уравнения с помощью данного калькулятора по формуле:
X1 = (-b + sqrt(b*b – 4ac)) / 2a
X2 = (-b - sqrt(b*b – 4ac)) / 2a

Дополнительно: реализровать веб интерфейс доступа к калькулятору.

Развитие калькулятора с семинара No2.
Создать класс фактори для создания команд. То есть создать отельный класс который будет
иметь с аргументом имя команды и возвращать реализацию интерфейса Command для
данной команды. Реализовать следующие возможности:
1. Конфигурация списка команд через property файл factory класса. Это позволит
добавлять команды без перекомпиляции остального проекта. Добавить новые
арифметические команды: EXP, LOG
2. Реализовать Dependency injection для команд калькулятора: добавить аннотацию
@In(arg={STACK, CONTEXT}) для полей классов реализующих команды
калькулятора. При создание команды в фактори классе проверять наличие подобных
аннотаций и устанавливать данные поля до первого вызова команды. Реализовать
STACK, CONTEXT как перечисление (Enum)
3. Добавить режим «отладки» для команд: в данном режиме фактори возвращает не саму
команду, а Proxy объект (см java.lang.reflect.Proxy) в котором в файл журнала
средствами log4j  пишется:
1. Stack before
2. Context
3. Arguments
4. Stack after